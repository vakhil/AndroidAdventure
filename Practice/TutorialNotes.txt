a) T02.01- Exercise-CreateLayout gives a good enough template that you can use in your future Andoird App. Search for GitHub queries!!!

Android Design Tips:
1) Concept of FrameLayout i.e all of them overlap with each other. Before searching, all of them are invisible.  Just before the netWork Query, just make the Progress Dialog visible. After the network query, make the Progress Query DIsabled. Now make the resuts visible.

<FrameLayout>
  <ScrollView >
  	<TextView results>
  </ScrollView>
  <ProgressDialog invisible>
  <TextView errors invisible>
</FrameLayout> 


2) Menus and their importance. Tapping and overriding methodsz which tell what to do if menus are clicked. 
3) Button and OnCickListener. Button.onClickListener() 

str = {"name":{"firstName":"Akhil","lastName":"Vemula"},"age":"22"};
4) JSONObject object = new JSONObject(str);
   JSONObject name = object.getJSONObject("name");
   String age = object.getString("age");
   String firstName = name.getStirng("firtName");


Chapter-2 Summary:
a) GitHub API https://api.github.com/search/repositories?q=akhil&sort=stars
b) Menu for clicking to get Data, EditText , TextView inside ScrollView for showing data. ProgressBar 
c) AysncTask when needed to long Network calls 


##########################################################################
Chapter-4 Intents Summary and what we learned:

Intents are useful for communication between 2 activities. They are basically like courier.
1) Explicit Intents: Sometimes we create both the activites, sometimes and intents are useful for communication between them. This is called Explicit intents.

MainActivity.java:

Have a EditTextView and a button. The Button has a OnClickListener. When you press the button, you must move to a different activity.

button.OnClickListener( (v) -> {
	Intent intent = new Intent(MainActivity.this,ChildActivity.class);
	startActivity(intent);
});

This will lead us to the ChildActivity. If we want to pass someData to a childActivity, do :

button.OnClickListener( (v) -> {
	Intent intent = new Intent(MainActivity.this,ChildActivity.class);
	intent.putExtra(Intent.EXTRA_TEXT, value);
	startActivity(intent);
});

on ChildActivity.java:

Intent intentRecievied = getIntent();
if(intentReceived.hasExtra(Intent.EXTRA_TEXT))
	String value = intent.getStringExtra(Intent.EXTRA_TEXT);
	mTextValue.setString(value);

If we want to press backButton and go back to MainActivity, we need to add:
        <activity
            android:name=".MainActivity"
            android:label="@string/app_name">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name=".DetailActivity"
            android:parentActivityName=".MainActivity">
            <meta-data
                android:name="android.support.PARENT_ACTIVITY"
                android:value=".MainActivity" />
        </activity>


Implicit Intents:
	If we want someApp to open Maps, Music, Camera or Internet, we do not need to be worried and we just pass an Intent with a Key value specific to one thing like Internet. 

	PageToRefer: Common INtents in android developer
	https://developer.android.com/guide/components/intents-common#Browser

	Implicit intents have 2 things: an action(Intent.ACTION_VIEW) and Data (Uri)

	In case we want to open a website,

public void openWebPage(String url) {
    Uri webpage = Uri.parse(url);
    Intent intent = new Intent(Intent.ACTION_VIEW, webpage);
    if (intent.resolveActivity(getPackageManager()) != null) {
        startActivity(intent);
    }
}

Uri can be used for opening Map Location like a web-page. Url is a form of URI
Like a website is "http://udacity.com", Map Location is "geo:47.6,-122.3" or "geo:0,0?q=1600+Amphitheatre+Parkway%2C+CA" or "geo:0,0?q=34.99,-106.61(Treasure)"
scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]

SquareBracket is optional
For opening Map locations ,

public void onClickOpenAddressButton(View v){
	String AddressString = "1600 Amphitheatre Parkway, CA"
	Uri.Builder builder = new Uri.Builder();
	builder.scheme("geo").path("0,0").query(addressString);
	Uri addressUri = builder.build();

	Intent intent = new Intent(Intent.ACTION_VIEW);
	intent.setData(addressUri);
}

Implementing a Share Intent:
Many types we would want to share a data, Basically we want to implement a functionality like Share. Pressing on the menu and able to share some Data, we can use ShareIntent

Intent shareIntent = ShareCompat.IntentBuilder.from(activity).setType("text/plain").setText("somee text").getIntent();
startActivity(shareIntent);

Data types can be --> impage/png && video/mp4

Excersies on ToyAPp--> Just creating new Activities and passing data between THem

Having an EditView and A button. If someone presses the button, we take what is in the EditView and pass It on to the NextView which by template default will have a TextView.

Sunshine Exercise --> 
The present status of the App is that it has a RecyclerVIew with each view denoting a weatheer of some place. In the starting, the app makes a neetwork call with an async task which gets a lot of entries. Now, in this chapter we implemented another activity such that if any view is pressed, we go to Another Activity using an intent containing the viewpressed's data. There, we implemented Share option using a share menuItem.

Having A recyclerView and Adapter now, if I click on any weather of ViewHolder , we will take that data (Adapter.getPosition()) and pass the data to other view.



Remember, any ObjectVIew like button which has an method like setOnClickListener will take in a object which has implemented OnClick method . This is because 

interface OnClickListener
{
	public void onClick(View v)
	{

	}
}



#####################################################################
Chapter-6 Preferences: 

What if you had an App and wanted a way to specifiy your own customizions like Text Size and stuff in it. How would you do that? Using Preferences...



Data Persistence in Android:
a) savedInstanceStates --> allows you to save key/value pairs so as to keep setting when app is actively running . When we rotate a screen, OnStart() and OnResume are called and when we can pass our data using Bundle.
b) SharedPrefernces --> allows you to save key/value pair on a file so that data stays on the system even after shutting and restarting.
c) SQLiteDatabase --> if lots of fields are required to save
d) Internal Storage
e) Cloud

If you want to create a Settings like screen,  4 things are rquired
a) A new Activity and it's corresponding XML (SettingsActivity.java & activity_settings.xml) Here we display our settings Activity
b) SettingsFragment.java which extends PreferenceFragmentCompat
c) pref_visualizer.xml in xml directory . This has code for UI of SettingsFragment.java

SettingsActivity.java

onCreate()
{
        super.onCreate(savedInstanceState);
        this.setContentView(R.layout.activity_settings);
}

activity_settings.xml

<fragment xmlns:android="http://schemas.android.com/apk/res/android"
          android:name="com.example.android.sunshine.SettingsFragment"
          android:id="@+id/weather_settings_fragment"
          android:layout_width="match_parent"
          android:layout_height="match_parent" />

SettingsFragment.java

public class SettingsFragment extends PreferenceFragmentCompat{
	
	  @Override
    public void onCreatePreferences(Bundle bundle, String s) {
    	addPreferencesFromResource(R.xml.pref_visualiser);
    }
}

pref_visualiser.xml

<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent">

    <EditTextPreference
        android:defaultValue="@string/pref_location_default"
        android:inputType="text"
        android:key="@string/pref_location_key"
        android:singleLine="true"
        android:title="@string/pref_location_label" />

    <ListPreference
        android:defaultValue="@string/pref_units_metric"
        android:entries="@array/pref_units_options"
        android:entryValues="@array/pref_units_values"
        android:key="@string/pref_units_key"
        android:title="@string/pref_units_label" />

</PreferenceScreen>

If we want to Update any UI after changing the preferences, we can add Listeners to the UI which we want to change like,

public class MainActivity extends AppCompatActivity implements
        ForecastAdapter.ForecastAdapterOnClickHandler{
        	OnCreate()
        	{
        		     PreferenceManager.getDefaultSharedPreferences(this)
                .registerOnSharedPreferenceChangeListener(this);
        	}

        	    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String s) {
        PREFERENCES_HAVE_BEEN_UPDATED = true;
    }


        }

Summary of Lesson: SharedPreferences is a way to store key/value pairs permanently. And How can we produce the UI required to achieve that?
And how can we achieve the changes in UI when any setting is changed?

Summary of the SunShine App: We can specify a user location and change Metric system of the app and that change, now gets reflected in the main App. SharedPreferences Concept is highlighted. When loading the App, network calls are made and Weather of all next 7 days are shown. If clicking on one app, we go to a new intent. 